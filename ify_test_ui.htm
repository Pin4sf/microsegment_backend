<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Shopify Data Collection Demo</title>
        <style>
            body {
                font-family: sans-serif;
                margin: 20px;
                background-color: #f4f4f4;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background-color: #fff;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            }
            .step {
                margin-bottom: 30px;
                padding: 20px;
                border: 1px solid #ddd;
                border-radius: 8px;
                background-color: #fff;
            }
            .step.active {
                border-color: #007bff;
                box-shadow: 0 0 10px rgba(0, 123, 255, 0.2);
            }
            .step.completed {
                border-color: #28a745;
                background-color: #f8fff8;
            }
            .step-number {
                display: inline-block;
                width: 30px;
                height: 30px;
                line-height: 30px;
                text-align: center;
                background-color: #007bff;
                color: white;
                border-radius: 50%;
                margin-right: 10px;
            }
            .step.completed .step-number {
                background-color: #28a745;
            }
            input[type="text"] {
                width: 100%;
                padding: 10px;
                margin: 10px 0;
                border: 1px solid #ddd;
                border-radius: 4px;
                box-sizing: border-box;
            }
            button {
                padding: 12px 24px;
                background-color: #007bff;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 16px;
                transition: background-color 0.3s;
            }
            button:hover {
                background-color: #0056b3;
            }
            button:disabled {
                background-color: #ccc;
                cursor: not-allowed;
            }
            .data-display {
                margin-top: 20px;
                padding: 20px;
                background-color: #f8f9fa;
                border-radius: 4px;
            }
            .data-section {
                margin-bottom: 20px;
            }
            .data-section h4 {
                margin: 0 0 10px 0;
                color: #333;
            }
            .data-grid {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                gap: 20px;
                margin-top: 20px;
            }
            .data-card {
                background: white;
                padding: 15px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
            .loader {
                border: 5px solid #f3f3f3;
                border-top: 5px solid #3498db;
                border-radius: 50%;
                width: 30px;
                height: 30px;
                animation: spin 1s linear infinite;
                margin: 20px auto;
                display: none;
            }
            @keyframes spin {
                0% {
                    transform: rotate(0deg);
                }
                100% {
                    transform: rotate(360deg);
                }
            }
            .status-badge {
                display: inline-block;
                padding: 5px 10px;
                border-radius: 15px;
                font-size: 0.9em;
                margin-left: 10px;
            }
            .status-connected {
                background-color: #28a745;
                color: white;
            }
            .status-disconnected {
                background-color: #dc3545;
                color: white;
            }
            .hidden {
                display: none;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Shopify Data Collection Demo</h1>

            <!-- Step 1: Connect to Shopify -->
            <div class="step" id="step1">
                <h2>
                    <span class="step-number">1</span>Connect to Your Shopify
                    Store
                </h2>
                <p>
                    Enter your Shopify store domain to begin the connection
                    process.
                </p>
                <input
                    type="text"
                    id="shopDomain"
                    placeholder="your-store.myshopify.com"
                />
                <button onclick="connectShopify()" id="connectButton">
                    Connect to Shopify
                </button>
                <div
                    id="connectionStatus"
                    class="status-badge status-disconnected"
                >
                    Disconnected
                </div>

                <!-- Manual Credential Input -->
                <div
                    class="manual-credentials"
                    style="
                        margin-top: 20px;
                        padding: 15px;
                        background: #f8f9fa;
                        border-radius: 4px;
                    "
                >
                    <h3>Manual Credential Entry</h3>
                    <p>
                        If you've already completed the Shopify installation,
                        you can enter the credentials manually:
                    </p>
                    <div style="margin-bottom: 10px">
                        <label for="manualShop">Shop Domain:</label>
                        <input
                            type="text"
                            id="manualShop"
                            placeholder="your-store.myshopify.com"
                            style="width: 100%"
                        />
                    </div>
                    <div style="margin-bottom: 10px">
                        <label for="manualToken">Access Token:</label>
                        <input
                            type="text"
                            id="manualToken"
                            placeholder="shpat_..."
                            style="width: 100%"
                        />
                    </div>
                    <button
                        onclick="useManualCredentials()"
                        style="background-color: #28a745"
                    >
                        Use These Credentials
                    </button>
                </div>
            </div>

            <!-- Step 2: Collect Data -->
            <div class="step" id="step2">
                <h2>
                    <span class="step-number">2</span>Collect Your Store Data
                </h2>
                <p>
                    Once connected, click below to start collecting your store
                    data.
                </p>
                <button onclick="collectData()" id="collectButton" disabled>
                    Collect Store Data
                </button>
                <div class="loader" id="dataLoader"></div>
            </div>

            <!-- Step 3: View Data -->
            <div class="step" id="step3">
                <h2><span class="step-number">3</span>View Collected Data</h2>
                <div class="data-display" id="dataDisplay">
                    <div class="data-section">
                        <h4>Customers</h4>
                        <div class="data-grid" id="customersGrid"></div>
                    </div>
                    <div class="data-section">
                        <h4>Products</h4>
                        <div class="data-grid" id="productsGrid"></div>
                    </div>
                    <div class="data-section">
                        <h4>Orders</h4>
                        <div class="data-grid" id="ordersGrid"></div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            const backendBaseUrl = "https://alien-adapted-gecko.ngrok-free.app";
            let currentShop = null;
            let currentAccessToken = null;

            // Update steps based on connection status
            function updateSteps() {
                console.log("Updating steps with:", {
                    currentShop,
                    currentAccessToken,
                });
                const step1 = document.getElementById("step1");
                const step2 = document.getElementById("step2");
                const collectButton = document.getElementById("collectButton");

                if (currentShop && currentAccessToken) {
                    console.log("Connection successful, updating UI");
                    step1.classList.add("completed");
                    step2.classList.add("active");
                    collectButton.disabled = false;
                    document.getElementById("connectionStatus").className =
                        "status-badge status-connected";
                    document.getElementById("connectionStatus").textContent =
                        "Connected";
                } else {
                    console.log("Connection incomplete:", {
                        currentShop,
                        currentAccessToken,
                    });
                }
            }

            // Connect to Shopify
            function connectShopify() {
                const shopDomain = document
                    .getElementById("shopDomain")
                    .value.trim();
                if (!shopDomain) {
                    alert("Please enter your Shopify store domain");
                    return;
                }

                const connectUrl = `${backendBaseUrl}/api/auth/shopify/connect?shop=${encodeURIComponent(
                    shopDomain
                )}`;
                window.open(connectUrl, "_blank");
            }

            // Collect store data
            async function collectData() {
                if (!currentShop || !currentAccessToken) {
                    alert("Please connect to Shopify first");
                    return;
                }

                const loader = document.getElementById("dataLoader");
                loader.style.display = "block";
                document.getElementById("collectButton").disabled = true;

                try {
                    // Send parameters as query parameters
                    const response = await fetch(
                        `${backendBaseUrl}/api/data-pull/start?shop=${encodeURIComponent(
                            currentShop
                        )}&access_token=${encodeURIComponent(
                            currentAccessToken
                        )}`,
                        {
                            method: "POST",
                            headers: {
                                Accept: "application/json",
                            },
                            mode: "cors",
                            credentials: "include",
                        }
                    );

                    if (!response.ok) {
                        const errorData = await response
                            .json()
                            .catch(() => ({}));
                        throw new Error(
                            errorData.message ||
                                `HTTP error! status: ${response.status}`
                        );
                    }

                    const data = await response.json();

                    if (response.ok) {
                        // Start polling for the main task status
                        pollMainTaskStatus(data.task_id);
                    } else {
                        throw new Error(
                            data.message || "Failed to start data collection"
                        );
                    }
                } catch (error) {
                    console.error("Error details:", error);
                    let errorMessage = error.message;

                    // Handle CORS errors specifically
                    if (
                        error.message.includes("CORS") ||
                        error.message.includes("Access-Control-Allow-Origin")
                    ) {
                        errorMessage =
                            "CORS Error: Unable to connect to the backend. Please ensure the backend server is running and CORS is properly configured.";
                    }

                    alert("Error: " + errorMessage);
                } finally {
                    loader.style.display = "none";
                    document.getElementById("collectButton").disabled = false;
                }
            }

            // Poll for main task status
            async function pollMainTaskStatus(mainTaskId) {
                const maxAttempts = 30;
                const interval = 3000; // 3 seconds

                for (let i = 0; i < maxAttempts; i++) {
                    try {
                        const response = await fetch(
                            `${backendBaseUrl}/api/data-pull/status/${mainTaskId}`,
                            {
                                method: "GET",
                                headers: {
                                    Accept: "application/json",
                                },
                                mode: "cors",
                                credentials: "include",
                            }
                        );

                        if (!response.ok) {
                            throw new Error(
                                `HTTP error! status: ${response.status}`
                            );
                        }

                        const data = await response.json();
                        console.log(
                            `Polling main task ${mainTaskId}, Status: ${data.status}`
                        );

                        if (data.status === "completed") {
                            // Main task completed, get sub-task IDs from its result
                            console.log(
                                "Main task completed, checking result:",
                                data.result
                            );
                            if (data.result && data.result.tasks) {
                                console.log(
                                    "Sub-task IDs found, starting polling:",
                                    data.result.tasks
                                );
                                pollSubTaskResults(data.result.tasks);
                                return; // Stop polling the main task
                            } else {
                                console.error(
                                    "Main task completed but result is missing task IDs.",
                                    data
                                );
                                throw new Error(
                                    "Main task completed but result is missing individual task IDs. Check backend logs."
                                );
                            }
                        } else if (data.status === "failed") {
                            throw new Error(
                                `Main task failed: ${
                                    data.error || "Unknown error"
                                }`
                            );
                        }
                    } catch (error) {
                        console.error(
                            `Error polling main task ${mainTaskId}:`,
                            error
                        );
                        if (i === maxAttempts - 1) {
                            throw new Error(
                                `Failed to get main task status: ${error.message}`
                            );
                        }
                    }

                    await new Promise((resolve) =>
                        setTimeout(resolve, interval)
                    );
                }

                throw new Error(
                    `Timeout waiting for main task ${mainTaskId} to complete`
                );
            }

            // Poll for individual sub-task results
            async function pollSubTaskResults(taskIds) {
                const { customers, products, orders } = taskIds;

                try {
                    // Poll for customers
                    const customersData = await pollTaskResult(
                        customers,
                        "customers"
                    );
                    displayCustomers(customersData);

                    // Poll for products
                    const productsData = await pollTaskResult(
                        products,
                        "products"
                    );
                    displayProducts(productsData);

                    // Poll for orders
                    const ordersData = await pollTaskResult(orders, "orders");
                    displayOrders(ordersData);

                    // Mark step 2 as completed and activate step 3
                    document.getElementById("step2").classList.add("completed");
                    document.getElementById("step3").classList.add("active");
                } catch (error) {
                    alert("Error polling results: " + error.message);
                }
            }

            // Poll individual task result
            async function pollTaskResult(taskId, type) {
                const maxAttempts = 60;
                const interval = 3000; // 3 seconds
                let failedAttempts = 0;
                const maxFailedAttempts = 15; // Further increase max consecutive failures

                for (let i = 0; i < maxAttempts; i++) {
                    try {
                        const response = await fetch(
                            `${backendBaseUrl}/api/data-pull/results/${currentShop}/${taskId}?data_type=${encodeURIComponent(
                                type
                            )}`,
                            {
                                method: "GET",
                                headers: {
                                    Accept: "application/json",
                                },
                                mode: "cors",
                                credentials: "include",
                            }
                        );

                        if (!response.ok) {
                            failedAttempts++;
                            if (failedAttempts >= maxFailedAttempts) {
                                console.error(
                                    `Max failed attempts reached for task ${taskId} (${type}). Stopping polling.`
                                );
                                throw new Error(
                                    `Failed to get ${type} data after ${maxFailedAttempts} attempts. HTTP status: ${response.status}`
                                );
                            }
                            console.warn(
                                `Attempt ${
                                    i + 1
                                } failed for task ${taskId} (${type}), status: ${
                                    response.status
                                }. Retrying...`
                            );
                            if (response.status !== 404) {
                                const errorData = await response
                                    .json()
                                    .catch(() => ({
                                        message:
                                            "Could not parse error response",
                                    }));
                                console.error(
                                    `Error details for task ${taskId} (${type}):`,
                                    errorData.detail ||
                                        errorData.message ||
                                        "No error detail provided"
                                );
                            }
                            await new Promise((resolve) =>
                                setTimeout(resolve, interval)
                            );
                            continue;
                        }

                        const data = await response.json();

                        if (
                            data.status === "completed" ||
                            data.status === "success"
                        ) {
                            return data.data;
                        } else if (data.status === "failed") {
                            console.error(
                                `Task ${taskId} (${type}) failed: ${
                                    data.error || "Unknown error"
                                }`
                            );
                            throw new Error(
                                `Task ${taskId} (${type}) failed: ${
                                    data.error || "Unknown error"
                                }`
                            );
                        }
                        failedAttempts = 0;
                    } catch (error) {
                        console.error(`Error polling ${type} data:`, error);
                        if (
                            i === maxAttempts - 1 ||
                            failedAttempts >= maxFailedAttempts
                        ) {
                            throw new Error(
                                `Failed to get ${type} data: ${error.message}`
                            );
                        }
                        failedAttempts++;
                    }

                    await new Promise((resolve) =>
                        setTimeout(resolve, interval)
                    );
                }

                throw new Error(`Timeout waiting for ${type} data`);
            }

            // Display functions
            function displayCustomers(customers) {
                const grid = document.getElementById("customersGrid");
                grid.innerHTML = customers
                    .map(
                        (customer) => `
                    <div class="data-card">
                        <h5>${customer.firstName} ${customer.lastName}</h5>
                        <p>Email: ${customer.email}</p>
                        <p>Created: ${new Date(
                            customer.createdAt
                        ).toLocaleDateString()}</p>
                    </div>
                `
                    )
                    .join("");
            }

            function displayProducts(products) {
                const grid = document.getElementById("productsGrid");
                grid.innerHTML = products
                    .map(
                        (product) => `
                    <div class="data-card">
                        <h5>${product.title}</h5>
                        <p>Type: ${product.productType}</p>
                        <p>Vendor: ${product.vendor}</p>
                        <p>Status: ${product.status}</p>
                    </div>
                `
                    )
                    .join("");
            }

            function displayOrders(orders) {
                const grid = document.getElementById("ordersGrid");
                grid.innerHTML = orders
                    .map(
                        (order) => `
                    <div class="data-card">
                        <h5>Order ${order.name}</h5>
                        <p>Customer: ${order.customer?.email || "N/A"}</p>
                        <p>Status: ${order.displayFinancialStatus}</p>
                        <p>Total: ${order.totalPriceSet?.shopMoney?.amount} ${
                            order.totalPriceSet?.shopMoney?.currencyCode
                        }</p>
                    </div>
                `
                    )
                    .join("");
            }

            // Function to use manually entered credentials
            function useManualCredentials() {
                const shop = document.getElementById("manualShop").value.trim();
                const token = document
                    .getElementById("manualToken")
                    .value.trim();

                if (!shop || !token) {
                    alert("Please enter both shop domain and access token");
                    return;
                }

                currentShop = shop;
                currentAccessToken = token;
                document.getElementById("shopDomain").value = shop;
                updateSteps();
            }

            // Function to copy credentials from app-home page
            function copyFromAppHome() {
                const shopDomain = document
                    .querySelector('h2:contains("Shop Domain:")')
                    .nextSibling.textContent.trim();
                const accessToken = document
                    .querySelector('h2:contains("Access Token:")')
                    .nextSibling.textContent.trim();

                if (shopDomain && accessToken) {
                    document.getElementById("manualShop").value = shopDomain;
                    document.getElementById("manualToken").value = accessToken;
                    useManualCredentials();
                }
            }

            // Update the message listener to handle app-home data
            window.addEventListener("message", function (event) {
                console.log("Received message:", event.data);
                if (event.origin !== backendBaseUrl) {
                    console.log(
                        "Origin mismatch:",
                        event.origin,
                        backendBaseUrl
                    );
                    return;
                }

                if (event.data && event.data.type === "auth_success") {
                    console.log("Auth success received:", event.data);
                    currentShop = event.data.shop;
                    currentAccessToken = event.data.access_token;
                    document.getElementById("shopDomain").value = currentShop;
                    document.getElementById("manualShop").value = currentShop;
                    document.getElementById("manualToken").value =
                        currentAccessToken;
                    updateSteps();
                }
            });

            // Add keyboard shortcut for manual credential entry
            document.addEventListener("keydown", function (event) {
                // Ctrl/Cmd + Shift + M to focus on manual token input
                if (
                    (event.ctrlKey || event.metaKey) &&
                    event.shiftKey &&
                    event.key === "M"
                ) {
                    event.preventDefault();
                    document.getElementById("manualToken").focus();
                }
            });

            // Check URL parameters on load
            window.onload = function () {
                console.log("Page loaded, checking URL parameters");
                const urlParams = new URLSearchParams(window.location.search);
                const shop = urlParams.get("shop");
                const accessToken = urlParams.get("access_token");

                console.log("URL params:", { shop, accessToken });

                if (shop && accessToken) {
                    console.log("Found shop and access token in URL");
                    currentShop = shop;
                    currentAccessToken = accessToken;
                    document.getElementById("shopDomain").value = shop;
                    updateSteps();
                }

                // If we're on the callback page, send message to opener
                if (window.location.pathname.includes("/callback")) {
                    console.log("On callback page, sending message to opener");
                    const shop = urlParams.get("shop");
                    const accessToken = urlParams.get("access_token");

                    if (shop && accessToken && window.opener) {
                        console.log("Sending auth success message to opener");
                        window.opener.postMessage(
                            {
                                type: "auth_success",
                                shop: shop,
                                access_token: accessToken,
                            },
                            backendBaseUrl
                        );
                    }
                }
            };
        </script>
    </body>
</html>
