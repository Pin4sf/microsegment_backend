<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Shopify Backend Test UI</title>
        <style>
            body {
                font-family: sans-serif;
                margin: 20px;
                background-color: #f4f4f4;
            }
            .container {
                background-color: #fff;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            }
            input[type="text"],
            button,
            select {
                padding: 10px;
                margin-bottom: 10px;
                border-radius: 4px;
                border: 1px solid #ddd;
                box-sizing: border-box;
            }
            button {
                cursor: pointer;
                background-color: #007bff;
                color: white;
                border-color: #007bff;
            }
            button:hover {
                background-color: #0056b3;
            }
            pre {
                background-color: #eee;
                padding: 15px;
                border-radius: 4px;
                white-space: pre-wrap;
                word-wrap: break-word;
                max-height: 400px;
                overflow-y: auto;
            }
            .hidden {
                display: none;
            }
            .loader {
                border: 5px solid #f3f3f3;
                border-top: 5px solid #3498db;
                border-radius: 50%;
                width: 30px;
                height: 30px;
                animation: spin 1s linear infinite;
                margin-bottom: 10px;
            }
            @keyframes spin {
                0% {
                    transform: rotate(0deg);
                }
                100% {
                    transform: rotate(360deg);
                }
            }
            h2,
            h3 {
                color: #333;
            }
            .endpoint-section {
                margin-bottom: 20px;
                padding-bottom: 10px;
                border-bottom: 1px solid #eee;
            }
            label {
                display: inline-block;
                margin-bottom: 5px;
                font-weight: bold;
            }
            .status-badge {
                display: inline-block;
                padding: 5px 10px;
                border-radius: 15px;
                font-size: 0.9em;
                margin-left: 10px;
            }
            .status-connected {
                background-color: #4caf50;
                color: white;
            }
            .status-disconnected {
                background-color: #f44336;
                color: white;
            }
            .auto-fill-info {
                font-size: 0.9em;
                color: #666;
                margin-top: 5px;
            }
            input[readonly] {
                background-color: #f8f8f8;
                cursor: not-allowed;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h2>Shopify Backend Test Interface</h2>

            <div class="endpoint-section">
                <h3>
                    1. Connect to Shopify Store (OAuth Flow)
                    <span
                        id="connectionStatus"
                        class="status-badge status-disconnected"
                        >Disconnected</span
                    >
                </h3>
                <label for="shopDomainConnect"
                    >Shop Domain (e.g., your-store.myshopify.com):</label
                ><br />
                <input type="text" id="shopDomainConnect" size="50" /><br />
                <button onclick="connectShopify()">
                    Connect Shopify Store
                </button>
                <p>
                    <small
                        >This will redirect you to Shopify for authorization.
                        After approval, Shopify redirects to the backend's
                        `/callback`. The backend will then log the raw access
                        token (check backend console) and store it in the
                        database. For now, you'll need to manually copy the shop
                        domain and the logged raw access token to Section 2 for
                        API testing.</small
                    >
                </p>
            </div>

            <div class="endpoint-section">
                <h3>2. API Credentials for Data Fetching</h3>
                <p>
                    <small
                        ><b>Note:</b> These fields will be automatically
                        populated after successful OAuth flow.</small
                    >
                </p>
                <label for="shopDomainAPI">Shop Domain:</label><br />
                <input
                    type="text"
                    id="shopDomainAPI"
                    size="50"
                    placeholder="e.g., teststorshivansh.myshopify.com"
                    readonly
                /><br />
                <label for="accessTokenAPI"
                    >Access Token (from backend logs after OAuth):</label
                ><br />
                <input
                    type="text"
                    id="accessTokenAPI"
                    size="70"
                    placeholder="Enter raw access token obtained from callback logs"
                    readonly
                /><br />
                <div class="auto-fill-info">
                    These fields will be automatically populated after
                    successful authentication
                </div>
            </div>

            <div class="endpoint-section">
                <h3>3. Fetch Shopify Data</h3>
                <label for="customQuery"
                    >Custom Query (optional, e.g.,
                    <code>title:MyProduct</code> or
                    <code>financial_status:paid</code>):</label
                ><br />
                <input type="text" id="customQuery" size="70" /><br />
                <label for="cursor">Cursor (optional, for pagination):</label
                ><br />
                <input type="text" id="cursor" size="70" /><br />
                <label for="first">First N items (default 10):</label><br />
                <input
                    type="text"
                    id="first"
                    size="10"
                    value="10"
                /><br /><br />

                <button onclick="fetchData('/api/data/shopify/products')">
                    Get Products
                </button>
                <button onclick="fetchData('/api/data/shopify/orders')">
                    Get Orders
                </button>
                <button onclick="fetchData('/api/data/shopify/customers')">
                    Get Customers
                </button>
                <br /><br />
                <label for="orderIdForTransactions"
                    >Order ID (for Transactions, e.g.,
                    <code>gid://shopify/Order/XYZ</code>):</label
                ><br />
                <input
                    type="text"
                    id="orderIdForTransactions"
                    size="70"
                /><br />
                <button onclick="fetchTransactions()">
                    Get Transactions for Order
                </button>
            </div>

            <h3>4. API Response</h3>
            <div id="loader" class="loader hidden"></div>
            <pre id="responseArea">API responses will appear here...</pre>
        </div>

        <script>
            const backendBaseUrl = "https://alien-adapted-gecko.ngrok-free.app"; // IMPORTANT: Replace with your ngrok HTTPS URL
            let currentShop = null;
            let currentAccessToken = null;

            const shopDomainConnectInput =
                document.getElementById("shopDomainConnect");
            const shopDomainAPIInput = document.getElementById("shopDomainAPI");
            const accessTokenAPIInput =
                document.getElementById("accessTokenAPI");
            const customQueryInput = document.getElementById("customQuery");
            const cursorInput = document.getElementById("cursor");
            const firstInput = document.getElementById("first");
            const orderIdInput = document.getElementById(
                "orderIdForTransactions"
            );
            const responseArea = document.getElementById("responseArea");
            const loader = document.getElementById("loader");

            // This onload is for ify_test_ui.htm itself, primarily for initialization or if parameters are passed directly.
            // The postMessage listener will handle data from the popup.
            window.onload = function () {
                console.log("ify_test_ui.htm loaded.");
                // Example: Check if any initial setup is needed or if params are directly in URL (fallback)
                const urlParams = new URLSearchParams(window.location.search);
                const initialShop = urlParams.get("shop_init"); // Using different param names to avoid conflict
                const initialToken = urlParams.get("token_init");

                if (initialShop && initialToken) {
                    console.log("Initial shop and token found in URL (fallback):", initialShop);
                    shopDomainConnectInput.value = initialShop;
                    shopDomainAPIInput.value = initialShop;
                    accessTokenAPIInput.value = initialToken;
                    currentShop = initialShop;
                    currentAccessToken = initialToken;
                    updateConnectionStatus(true);
                    // Optionally clear these specific params
                    urlParams.delete("shop_init");
                    urlParams.delete("token_init");
                    window.history.replaceState({}, document.title, `${window.location.pathname}?${urlParams}`);
                }
            };

            function updateConnectionStatus(connected) {
                const statusElement =
                    document.getElementById("connectionStatus");
                if (connected) {
                    statusElement.textContent = "Connected";
                    statusElement.className = "status-badge status-connected";
                } else {
                    statusElement.textContent = "Disconnected";
                    statusElement.className =
                        "status-badge status-disconnected";
                }
            }

            function connectShopify() {
                const shopDomain = shopDomainConnectInput.value.trim();
                if (!shopDomain) {
                    alert("Please enter a shop domain.");
                    return;
                }
                if (
                    !backendBaseUrl ||
                    backendBaseUrl === "YOUR_NGROK_HTTPS_URL"
                ) {
                    alert(
                        "Please configure the backendBaseUrl in the script tag with your ngrok HTTPS URL."
                    );
                    return;
                }

                // Open auth in new tab
                const connectUrl = `${backendBaseUrl}/api/auth/shopify/connect?shop=${encodeURIComponent(
                    shopDomain
                )}`;
                console.log("Opening in new tab:", connectUrl);
                window.open(connectUrl, "_blank");
            }

            // Listen for messages from app-home page (the popup)
            window.addEventListener("message", function (event) {
                console.log("Message received in ify_test_ui.htm:", event);

                // IMPORTANT: For security, verify event.origin.
                // It should match the origin of your FastAPI backend (where app_home is served).
                // backendBaseUrl should be just the origin, e.g., "https://your-ngrok-domain.com"
                // not "https://your-ngrok-domain.com/api/auth/shopify/app-home"
                let expectedOrigin = "";
                try {
                    expectedOrigin = new URL(backendBaseUrl).origin;
                } catch (e) {
                    console.error("Invalid backendBaseUrl for origin check:", backendBaseUrl, e);
                    // Fallback for local file testing if backendBaseUrl isn't a full URL
                    // This part is tricky and depends on how you run ify_test_ui.htm
                    // If ify_test_ui.htm is served by the same FastAPI app, this check is more reliable.
                    // If it's a local file, event.origin might be "null" or "file://".
                    // For development, you might temporarily relax this or log event.origin.
                }

                console.log("Expected origin for message:", expectedOrigin);
                console.log("Actual message origin:", event.origin);

                // Example: if (event.origin !== expectedOrigin && expectedOrigin !== "") {
                //     console.warn("Message received from unexpected origin:", event.origin, ". Expected:", expectedOrigin);
                //     return; // Stop processing if origin doesn't match
                // }
                // For now, we'll be a bit more permissive for local dev, but log.
                if (expectedOrigin && event.origin !== expectedOrigin && event.origin !== "null" && !event.origin.startsWith("file:")) {
                     console.warn("Message from unexpected origin. Expected:", expectedOrigin, "Got:", event.origin);
                     // return; // Uncomment in production or stricter dev
                }


                // Check if the message contains the correct auth data structure
                if (event.data && event.data.type === "shopify_auth_success") {
                    const { shop, token } = event.data; // Ensure these keys match what app_home sends

                    console.log("Received shopify_auth_success message with shop:", shop, "and token:", token);

                    // Update the UI with the credentials
                    shopDomainConnectInput.value = shop; // Also update this for consistency
                    shopDomainAPIInput.value = shop;
                    accessTokenAPIInput.value = token; // Use 'token' as per new structure
                    currentShop = shop;
                    currentAccessToken = token; // Use 'token'
                    updateConnectionStatus(true);

                    console.log("Credentials received via postMessage and updated in test UI.");
                } else {
                    console.log("Received message of different type or structure:", event.data);
                }
            });

            // Removed the second window.onload that was meant for app-home.
            // The window.onload at the top of this script is for ify_test_ui.htm.

            async function fetchData(apiEndpoint) {
                if (!currentShop || !currentAccessToken) {
                    alert(
                        "Please connect to Shopify first using the OAuth flow."
                    );
                    return;
                }

                const customQuery = customQueryInput.value.trim() || null;
                const cursor = cursorInput.value.trim() || null;
                const first = parseInt(firstInput.value.trim()) || 10;

                if (
                    !backendBaseUrl ||
                    backendBaseUrl ===
                        "https://alien-adapted-gecko.ngrok-free.app"
                ) {
                    alert(
                        "Please configure the backendBaseUrl in the script tag."
                    );
                    return;
                }

                loader.classList.remove("hidden");
                responseArea.textContent = "Loading...";

                const requestBody = {
                    shop: currentShop,
                    access_token: currentAccessToken,
                    first: first,
                    cursor: cursor,
                    custom_query: customQuery,
                };

                console.log(
                    "Requesting URL:",
                    `${backendBaseUrl}${apiEndpoint}`
                );
                console.log(
                    "Request Body:",
                    JSON.stringify(requestBody, null, 2)
                );

                try {
                    const response = await fetch(
                        `${backendBaseUrl}${apiEndpoint}`,
                        {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify(requestBody),
                        }
                    );

                    const data = await response.json();
                    responseArea.textContent = JSON.stringify(data, null, 2);

                    if (!response.ok) {
                        console.error("API Error:", data);
                    }
                } catch (error) {
                    console.error("Fetch Error:", error);
                    responseArea.textContent = `Error: ${error.message}\n\nCheck console for more details. Is the backend running and accessible at ${backendBaseUrl}?`;
                } finally {
                    loader.classList.add("hidden");
                }
            }

            async function fetchTransactions() {
                if (!currentShop || !currentAccessToken) {
                    alert(
                        "Please connect to Shopify first using the OAuth flow."
                    );
                    return;
                }

                const orderId = orderIdInput.value.trim();
                const first = parseInt(firstInput.value.trim()) || 5;
                const cursor = cursorInput.value.trim() || null;

                if (
                    !backendBaseUrl ||
                    backendBaseUrl ===
                        "https://alien-adapted-gecko.ngrok-free.app"
                ) {
                    alert(
                        "Please configure the backendBaseUrl in the script tag."
                    );
                    return;
                }
                if (!orderId) {
                    alert("Please enter an Order ID to fetch transactions.");
                    return;
                }

                loader.classList.remove("hidden");
                responseArea.textContent = "Loading...";

                const requestBody = {
                    shop: currentShop,
                    access_token: currentAccessToken,
                    order_id: orderId,
                    first: first,
                    cursor: cursor,
                };

                console.log(
                    "Requesting URL:",
                    `${backendBaseUrl}/api/data/shopify/transactions`
                );
                console.log(
                    "Request Body for Transactions:",
                    JSON.stringify(requestBody, null, 2)
                );

                try {
                    const response = await fetch(
                        `${backendBaseUrl}/api/data/shopify/transactions`,
                        {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify(requestBody),
                        }
                    );

                    const data = await response.json();
                    responseArea.textContent = JSON.stringify(data, null, 2);

                    if (!response.ok) {
                        console.error("API Error:", data);
                    }
                } catch (error) {
                    console.error("Fetch Error:", error);
                    responseArea.textContent = `Error: ${error.message}\n\nCheck console for more details. Is the backend running and accessible at ${backendBaseUrl}?`;
                } finally {
                    loader.classList.add("hidden");
                }
            }
        </script>
    </body>
</html>
